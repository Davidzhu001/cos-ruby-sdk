{"name":"Cos-ruby-sdk","tagline":"Tencent COS(Cloud Object Service) Ruby SDK","body":"# Tencent COS Ruby SDK\r\n\r\n[![Gem Version](https://badge.fury.io/rb/cos.svg)](https://badge.fury.io/rb/cos) [![Dependency Status](https://gemnasium.com/RaymondChou/cos-ruby-sdk.svg)](https://gemnasium.com/RaymondChou/cos-ruby-sdk)\r\n [![Code Climate](https://codeclimate.com/github/RaymondChou/cos-ruby-sdk/badges/gpa.svg)](https://codeclimate.com/github/RaymondChou/cos-ruby-sdk) [![Build Status](https://travis-ci.org/RaymondChou/cos-ruby-sdk.svg?branch=master)](https://travis-ci.org/RaymondChou/cos-ruby-sdk) [![Test Coverage](https://codeclimate.com/github/RaymondChou/cos-ruby-sdk/badges/coverage.svg)](https://codeclimate.com/github/RaymondChou/cos-ruby-sdk/coverage)\r\n\r\n[![Gitter](https://badges.gitter.im/RaymondChou/cos-ruby-sdk.svg)](https://gitter.im/RaymondChou/cos-ruby-sdk?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge) [![Gem Downloads](http://ruby-gem-downloads-badge.herokuapp.com/cos?type=total)](https://rubygems.org/gems/cos) [![Github Code](http://img.shields.io/badge/github-code-blue.svg)](https://github.com/RaymondChou/cos-ruby-sdk) [![Yard Docs](http://img.shields.io/badge/yard-docs-blue.svg)](http://rubydoc.info/github/RaymondChou/cos-ruby-sdk)\r\n\r\n\r\n\r\n-----\r\n\r\nTencent🐧 COS(Cloud Object Service) SDK for Ruby  [腾讯云对象存储服务](http://wiki.qcloud.com/wiki/COS%E4%BA%A7%E5%93%81%E4%BB%8B%E7%BB%8D)\r\n\r\n- 100%实现COS官方Restful API\r\n  \r\n- 符合Ruby使用习惯的链式操作\r\n  \r\n- 支持HTTPS\r\n  \r\n- 支持大文件自动多线程分片断点续传上传、下载\r\n  \r\n- 支持Rails\r\n  \r\n- 提供便捷的[CLI工具:](#6-cli%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7)\r\n  \r\n  ![CLI示例](http://mytest-10016219.file.myqcloud.com/out2.gif)\r\n\r\n**目录**\r\n\r\n- [Tencent COS Ruby SDK](#tencent-cos-ruby-sdk)\r\n  - [1 运行环境](#1-%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83)\r\n  - [2 安装SDK](#2-%E5%AE%89%E8%A3%85sdk)\r\n  - [3 快速入门](#3-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8)\r\n    - [3.1 准备工作](#31-%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C)\r\n    - [3.2 初始化](#32-%E5%88%9D%E5%A7%8B%E5%8C%96)\r\n    - [3.3 指定Bucket](#33-%E6%8C%87%E5%AE%9Abucket)\r\n    - [3.4 目录操作示例](#34-%E7%9B%AE%E5%BD%95%E6%93%8D%E4%BD%9C%E7%A4%BA%E4%BE%8B)\r\n    - [3.5 文件操作示例](#35-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%A4%BA%E4%BE%8B)\r\n  - [4 SDK详细说明](#4-sdk%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E)\r\n    - [4.1 初始化与配置](#41-%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8E%E9%85%8D%E7%BD%AE)\r\n    - [4.2 指定Bucket](#42-%E6%8C%87%E5%AE%9Abucket)\r\n    - [4.3 Bucket操作（COS::Bucket）](#43-bucket%E6%93%8D%E4%BD%9C%EF%BC%88cosbucket%EF%BC%89)\r\n      - [4.3.1 获取Bucket属性](#431-%E8%8E%B7%E5%8F%96bucket%E5%B1%9E%E6%80%A7)\r\n      - [4.3.2 创建目录（create_folder，mkdir）](#432-%E5%88%9B%E5%BB%BA%E7%9B%AE%E5%BD%95%EF%BC%88create_folder%EF%BC%8Cmkdir%EF%BC%89)\r\n      - [4.3.3 列举目录（list，ls）](#433-%E5%88%97%E4%B8%BE%E7%9B%AE%E5%BD%95%EF%BC%88list%EF%BC%8Cls%EF%BC%89)\r\n      - [4.3.4 上传文件（upload）](#434-%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%EF%BC%88upload%EF%BC%89)\r\n      - [4.3.4 资源属性（stat）](#434-%E8%B5%84%E6%BA%90%E5%B1%9E%E6%80%A7%EF%BC%88stat%EF%BC%89)\r\n      - [4.3.5 更新资源属性（upadte）](#435-%E6%9B%B4%E6%96%B0%E8%B5%84%E6%BA%90%E5%B1%9E%E6%80%A7%EF%BC%88upadte%EF%BC%89)\r\n      - [4.3.6 删除资源（delete）](#436-%E5%88%A0%E9%99%A4%E8%B5%84%E6%BA%90%EF%BC%88delete%EF%BC%89)\r\n      - [4.3.7 删除资源（无异常）（delete!）](#437-%E5%88%A0%E9%99%A4%E8%B5%84%E6%BA%90%EF%BC%88%E6%97%A0%E5%BC%82%E5%B8%B8%EF%BC%89%EF%BC%88delete%EF%BC%89)\r\n      - [4.3.8 判断目录是否为空（empty?）](#438-%E5%88%A4%E6%96%AD%E7%9B%AE%E5%BD%95%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA%EF%BC%88empty%EF%BC%89)\r\n      - [4.3.9 判断资源是否存在（exist?，exists?）](#439-%E5%88%A4%E6%96%AD%E8%B5%84%E6%BA%90%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%EF%BC%88exist%EF%BC%8Cexists%EF%BC%89)\r\n      - [4.3.9 判断文件是否上传完成（complete?）](#439-%E5%88%A4%E6%96%AD%E6%96%87%E4%BB%B6%E6%98%AF%E5%90%A6%E4%B8%8A%E4%BC%A0%E5%AE%8C%E6%88%90%EF%BC%88complete%EF%BC%89)\r\n      - [4.3.10 获取文件的访问URL（url）](#4310-%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E7%9A%84%E8%AE%BF%E9%97%AEurl%EF%BC%88url%EF%BC%89)\r\n      - [4.3.11 下载文件（download）](#4311-%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%EF%BC%88download%EF%BC%89)\r\n      - [4.3.12 获取Object树形结构（tree）](#4312-%E8%8E%B7%E5%8F%96object%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84%EF%BC%88tree%EF%BC%89)\r\n      - [4.3.13 获取Hash树形结构（hash_tree）](#4313-%E8%8E%B7%E5%8F%96hash%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84%EF%BC%88hash_tree%EF%BC%89)\r\n      - [4.3.14 批量下载目录下的所有文件（download_all）](#4314-%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%EF%BC%88download_all%EF%BC%89)\r\n      - [4.3.15 批量上传目录中的所有文件（upload_all）](#4315-%E6%89%B9%E9%87%8F%E4%B8%8A%E4%BC%A0%E7%9B%AE%E5%BD%95%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%EF%BC%88upload_all%EF%BC%89)\r\n      - [4.3.16 获取资源个数详情（支持前缀搜索）（list_count）](#4316-%E8%8E%B7%E5%8F%96%E8%B5%84%E6%BA%90%E4%B8%AA%E6%95%B0%E8%AF%A6%E6%83%85%EF%BC%88%E6%94%AF%E6%8C%81%E5%89%8D%E7%BC%80%E6%90%9C%E7%B4%A2%EF%BC%89%EF%BC%88list_count%EF%BC%89)\r\n      - [4.3.17 获取资源个数（count, size）](#4317-%E8%8E%B7%E5%8F%96%E8%B5%84%E6%BA%90%E4%B8%AA%E6%95%B0%EF%BC%88count-size%EF%BC%89)\r\n      - [4.3.18 获取文件个数（count_files）](#4318-%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E4%B8%AA%E6%95%B0%EF%BC%88count_files%EF%BC%89)\r\n      - [4.3.19 获取目录个数（count_dirs）](#4319-%E8%8E%B7%E5%8F%96%E7%9B%AE%E5%BD%95%E4%B8%AA%E6%95%B0%EF%BC%88count_dirs%EF%BC%89)\r\n    - [4.4 资源操作](#44-%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C)\r\n      - [4.4.1 文件操作（COS::COSFile）](#441-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%EF%BC%88coscosfile%EF%BC%89)\r\n        - [4.4.1.1 获取文件属性](#4411-%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7)\r\n        - [4.4.1.2 获取当前文件属性（刷新）（stat）](#4412-%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7%EF%BC%88%E5%88%B7%E6%96%B0%EF%BC%89%EF%BC%88stat%EF%BC%89)\r\n        - [4.4.1.3 更新当前文件属性（upadte）](#4413-%E6%9B%B4%E6%96%B0%E5%BD%93%E5%89%8D%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7%EF%BC%88upadte%EF%BC%89)\r\n        - [4.4.1.4 删除当前文件（delete）](#4414-%E5%88%A0%E9%99%A4%E5%BD%93%E5%89%8D%E6%96%87%E4%BB%B6%EF%BC%88delete%EF%BC%89)\r\n        - [4.4.1.5 删除当前文件（无异常）（delete!）](#4415-%E5%88%A0%E9%99%A4%E5%BD%93%E5%89%8D%E6%96%87%E4%BB%B6%EF%BC%88%E6%97%A0%E5%BC%82%E5%B8%B8%EF%BC%89%EF%BC%88delete%EF%BC%89)\r\n        - [4.4.1.6 判断当前文件是否存在（exist?，exists?）](#4416-%E5%88%A4%E6%96%AD%E5%BD%93%E5%89%8D%E6%96%87%E4%BB%B6%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%EF%BC%88exist%EF%BC%8Cexists%EF%BC%89)\r\n        - [4.4.1.7 判断当前文件是否上传完成（complete?）](#4417-%E5%88%A4%E6%96%AD%E5%BD%93%E5%89%8D%E6%96%87%E4%BB%B6%E6%98%AF%E5%90%A6%E4%B8%8A%E4%BC%A0%E5%AE%8C%E6%88%90%EF%BC%88complete%EF%BC%89)\r\n        - [4.4.1.8 获取当前文件的访问URL（url）](#4418-%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%96%87%E4%BB%B6%E7%9A%84%E8%AE%BF%E9%97%AEurl%EF%BC%88url%EF%BC%89)\r\n        - [4.4.1.9 下载当前文件（download）](#4419-%E4%B8%8B%E8%BD%BD%E5%BD%93%E5%89%8D%E6%96%87%E4%BB%B6%EF%BC%88download%EF%BC%89)\r\n        - [4.4.1.10 判断当前文件与本地文件是否相同](#44110-%E5%88%A4%E6%96%AD%E5%BD%93%E5%89%8D%E6%96%87%E4%BB%B6%E4%B8%8E%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E6%98%AF%E5%90%A6%E7%9B%B8%E5%90%8C)\r\n      - [4.4.2 目录操作（COS::COSDir）](#442-%E7%9B%AE%E5%BD%95%E6%93%8D%E4%BD%9C%EF%BC%88coscosdir%EF%BC%89)\r\n        - [4.4.2.1 获取目录属性](#4421-%E8%8E%B7%E5%8F%96%E7%9B%AE%E5%BD%95%E5%B1%9E%E6%80%A7)\r\n        - [4.4.2.2 列举当前目录（前缀搜索）（list，ls）](#4422-%E5%88%97%E4%B8%BE%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%EF%BC%88%E5%89%8D%E7%BC%80%E6%90%9C%E7%B4%A2%EF%BC%89%EF%BC%88list%EF%BC%8Cls%EF%BC%89)\r\n        - [4.4.2.3 创建子目录（create_folder，mkdir）](#4423-%E5%88%9B%E5%BB%BA%E5%AD%90%E7%9B%AE%E5%BD%95%EF%BC%88create_folder%EF%BC%8Cmkdir%EF%BC%89)\r\n        - [4.4.2.4 上传文件至当前目录（upload）](#4424-%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E8%87%B3%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%EF%BC%88upload%EF%BC%89)\r\n        - [4.4.2.5 批量上传本地目录中的所有文件至当前目录（upload_all）](#4425-%E6%89%B9%E9%87%8F%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E7%9B%AE%E5%BD%95%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%E8%87%B3%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%EF%BC%88upload_all%EF%BC%89)\r\n        - [4.4.2.6 批量下载当前目录下的所有文件（download_all）](#4426-%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%EF%BC%88download_all%EF%BC%89)\r\n        - [4.4.2.7 当前目录属性（刷新）（stat）](#4427-%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E5%B1%9E%E6%80%A7%EF%BC%88%E5%88%B7%E6%96%B0%EF%BC%89%EF%BC%88stat%EF%BC%89)\r\n        - [4.4.2.8 更新当前目录属性（upadte）](#4428-%E6%9B%B4%E6%96%B0%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E5%B1%9E%E6%80%A7%EF%BC%88upadte%EF%BC%89)\r\n        - [4.4.2.9 删除当前目录（delete）](#4429-%E5%88%A0%E9%99%A4%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%EF%BC%88delete%EF%BC%89)\r\n        - [4.4.2.10 删除当前目录（无异常）（delete!）](#44210-%E5%88%A0%E9%99%A4%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%EF%BC%88%E6%97%A0%E5%BC%82%E5%B8%B8%EF%BC%89%EF%BC%88delete%EF%BC%89)\r\n        - [4.4.2.11 判断当前目录是否为空（empty?）](#44211-%E5%88%A4%E6%96%AD%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA%EF%BC%88empty%EF%BC%89)\r\n        - [4.4.2.12 判断当前目录是否存在（exist?，exists?）](#44212-%E5%88%A4%E6%96%AD%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%EF%BC%88exist%EF%BC%8Cexists%EF%BC%89)\r\n        - [4.4.2.13 获取当前目录下的Object树形结构（tree）](#44213-%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84object%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84%EF%BC%88tree%EF%BC%89)\r\n        - [4.4.2.14 获取当前目录下的Hash树形结构（hash_tree）](#44214-%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84hash%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84%EF%BC%88hash_tree%EF%BC%89)\r\n        - [4.4.2.15 获取当前目录下的资源个数详情（支持前缀搜索）（list_count）](#44215-%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E8%B5%84%E6%BA%90%E4%B8%AA%E6%95%B0%E8%AF%A6%E6%83%85%EF%BC%88%E6%94%AF%E6%8C%81%E5%89%8D%E7%BC%80%E6%90%9C%E7%B4%A2%EF%BC%89%EF%BC%88list_count%EF%BC%89)\r\n        - [4.4.2.16 获取当前目录下的资源个数（count, size）](#44216-%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E8%B5%84%E6%BA%90%E4%B8%AA%E6%95%B0%EF%BC%88count-size%EF%BC%89)\r\n        - [4.4.2.17 获取当前目录下的文件个数（count_files）](#44217-%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%AA%E6%95%B0%EF%BC%88count_files%EF%BC%89)\r\n        - [4.4.2.18 获取当前目录下的子目录个数（count_dirs）](#44218-%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E5%AD%90%E7%9B%AE%E5%BD%95%E4%B8%AA%E6%95%B0%EF%BC%88count_dirs%EF%BC%89)\r\n    - [4.5 签名操作（COS::Signature）](#45-%E7%AD%BE%E5%90%8D%E6%93%8D%E4%BD%9C%EF%BC%88cossignature%EF%BC%89)\r\n      - [4.5.1 获取单次有效签名（once）](#451-%E8%8E%B7%E5%8F%96%E5%8D%95%E6%AC%A1%E6%9C%89%E6%95%88%E7%AD%BE%E5%90%8D%EF%BC%88once%EF%BC%89)\r\n      - [4.5.2 获取多次有效签名（multiple）](#452-%E8%8E%B7%E5%8F%96%E5%A4%9A%E6%AC%A1%E6%9C%89%E6%95%88%E7%AD%BE%E5%90%8D%EF%BC%88multiple%EF%BC%89)\r\n  - [5 底层API（COS::API）](#5-%E5%BA%95%E5%B1%82api%EF%BC%88cosapi%EF%BC%89)\r\n    - [5.1 创建目录(create_folder)](#51-%E5%88%9B%E5%BB%BA%E7%9B%AE%E5%BD%95create_folder)\r\n    - [5.2 目录列表（前缀搜索）(list)](#52-%E7%9B%AE%E5%BD%95%E5%88%97%E8%A1%A8%EF%BC%88%E5%89%8D%E7%BC%80%E6%90%9C%E7%B4%A2%EF%BC%89list)\r\n    - [5.3 上传文件（完整上传）(upload)](#53-%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%EF%BC%88%E5%AE%8C%E6%95%B4%E4%B8%8A%E4%BC%A0%EF%BC%89upload)\r\n    - [5.4 上传文件（分片上传）(upload_slice)](#54-%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%EF%BC%88%E5%88%86%E7%89%87%E4%B8%8A%E4%BC%A0%EF%BC%89upload_slice)\r\n    - [5.5 更新文件、目录属性(update)](#55-%E6%9B%B4%E6%96%B0%E6%96%87%E4%BB%B6%E3%80%81%E7%9B%AE%E5%BD%95%E5%B1%9E%E6%80%A7update)\r\n    - [5.6 删除文件、目录(delete)](#56-%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E3%80%81%E7%9B%AE%E5%BD%95delete)\r\n    - [5.7 获取文件或目录属性(stat)](#57-%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E6%88%96%E7%9B%AE%E5%BD%95%E5%B1%9E%E6%80%A7stat)\r\n    - [5.8下载文件](#58%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6)\r\n  - [6 CLI命令行工具](#6-cli%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7)\r\n  - [7 运行测试](#7-%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95)\r\n\r\n## 1 运行环境\r\n\r\n- Ruby版本：MRI >= 1.9.3,  JRuby >= 1.9\r\n- 操作系统：Windows/Linux/OS X\r\n\r\n## 2 安装SDK\r\n\r\n添加至应用程序的Gemfile文件：\r\n\r\n``` ruby\r\ngem 'cos'\r\n```\r\n\r\n然后执行：\r\n\r\n``` \r\n$ bundle\r\n```\r\n\r\n或手动安装gem：\r\n\r\n``` \r\n$ gem install cos\r\n```\r\n\r\n## 3 快速入门\r\n\r\n### 3.1 准备工作\r\n\r\n在[腾讯云COS控制台](http://console.qcloud.com/cos)创建Bucket并获取您的`app_id` `secret_id` `secret_key` \r\n\r\n🔍具体操作可参考[COS控制台使用说明](http://www.qcloud.com/wiki/COS%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E)\r\n\r\n### 3.2 初始化\r\n\r\n``` ruby\r\nrequire 'cos'\r\n\r\nclient = COS::Client.new({\r\n  app_id:     'your_app_id',\r\n  secret_id:  'your_secret_id',\r\n  secret_key: 'your_secret_key',\r\n  protocol:   'https' # 使用https\r\n})\r\n```\r\n\r\n更多初始化参数及加载方式请见： [4.1 初始化与配置](#41-%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8E%E9%85%8D%E7%BD%AE)\r\n\r\n### 3.3 指定Bucket\r\n\r\n``` ruby\r\nbucket = client.bucket('your_bucket_name')\r\n```\r\n\r\n🎉【Tip】你也可以在初始化Client时通过`default_bucket`参数设置默认的Bucket：\r\n\r\n``` ruby\r\nclient = COS::Client.new({\r\n  app_id:         'your_app_id',\r\n  secret_id:      'your_secret_id',\r\n  secret_key:     'your_secret_key',\r\n  defualt_bucket: 'your_default_bucket',\r\n})\r\n# 取得默认Bucket\r\nbucket = client.bucket\r\n```\r\n\r\n### 3.4 目录操作示例\r\n\r\n``` ruby\r\n# 列举bucket根目录中的文件与目录\r\nbucket.list do |res|\r\n  if res.is_a?(COS::COSDir) # 或 res.type == 'dir'\r\n    puts \"Dir：#{res.name} #{res.biz_attr}\"\r\n    # 设置目录属性\r\n    res.update('属性1')\r\n  else\r\n    # 文件 COS::COSFile 或 res.type == 'file'\r\n    puts \"File：#{res.name}\"\r\n    # 输出Hash参数\r\n    puts res.to_hash\r\n  end\r\nend\r\n\r\n# 可以按路径列出资源\r\nbucket.list('/path/path2/') { |r| puts r.name }\r\n\r\n# 只列出文件\r\nbucket.list('/path/path2/', :pattern => :only_file) { |r| puts r.name }\r\n\r\n# 倒序只列出目录\r\nbucket.list('/path/path2/', :pattern => :only_dir, :order => :desc) { |r| puts r.name }\r\n\r\n# 获取bucket信息\r\nb = bucket.stat\r\nputs b.refers\r\n\r\n# 判断目录是否存在\r\nputs bucket.exist?('dir')\r\n# 获取目录信息\r\ndir = bucket.stat('dir')\r\n# 创建时间修改时间\r\nputs dir.created_at\r\nputs dir.updated_at\r\n# 判断目录是否是空的\r\nputs dir.empty?\r\n# 目录中的文件及目录总数\r\nputs dir.count\r\n# 目录中的文件总数\r\nputs dir.count_files\r\n# 目录中的文件夹总数\r\nputs dir.count_dirs\r\n# 获取目录的树形结构\r\nputs dir.hash_tree.to_json\r\n# 删除目录\r\nputs dir.delete!\r\n# 上传文件至目录, 自动大文件分片多线程断点续传\r\ndir.upload('file2', '~/path2/file2')\r\n# 批量上传文件至目录，自动大文件分片多线程断点续传\r\ndir.upload_all('~/path1')\r\n# 下载目录中的所有文件，自动大文件分片多线程断点续传\r\nputs bucket.stat('path3').download_all('~/path_store')\r\n```\r\n\r\n### 3.5 文件操作示例\r\n\r\n``` ruby\r\n# 上传文件，自动大文件分片多线程断点续传\r\nfile = bucket.upload('path', 'file1', '~/local_path/file1') do |pr|\r\n  puts \"上传进度 #{(pr*100).round(2)}%\"\r\nend\r\n# 判断文件是否存在\r\nputs bucket.exist?('path/file1')\r\n# 获取文件信息\r\nfile = bucket.stat('path/file1')\r\nputs file.name\r\nputs file.biz_attr\r\n# 更新文件属性\r\nfile.update('i am a biz attr')\r\n# 判断文件是否上传完成\r\nputs file.complete?\r\n# 获取文件大小\r\nputs file.size # file.file_size OR file.filesize\r\n# 获取文件格式化的文件大小\r\nputs file.format_size # 102KB, 3.1MB, 1.5GB\r\n# 下载文件，自动大文件分片多线程断点续传\r\nfile.download('~/path/file1') do |pr|\r\n  puts \"下载进度 #{(pr*100).round(2)}%\"\r\nend\r\n# 获取文件访问URL，私有读取bucket自动添加签名\r\nfile.url(cname: 's.domain.com')\r\n# 删除文件\r\nfile.delete\r\n```\r\n\r\n\r\n\r\n## 4 SDK详细说明\r\n\r\n### 4.1 初始化与配置\r\n\r\n- 4.1.1 详细参数\r\n  \r\n  ``` ruby\r\n  {\r\n    # COS分配的app_id\r\n    :app_id => 'app_id',\r\n    # COS分配的secret_id\r\n    :secret_id => 'secret_id',\r\n    # COS分配的secret_key\r\n    :secret_key => 'secret_key',\r\n    # COS Reatful API Host\r\n    :host => 'web.file.myqcloud.com',\r\n    # 使用协议,默认为http,可选https\r\n    :protocol => 'https',\r\n    # 接口通讯建立连接超时秒数\r\n    :open_timeout => 15,\r\n    # 接口通讯读取数据超时秒数\r\n    :read_timeout => 120,\r\n    # 加载配置文件路径\r\n    :config => '~/path/cos.yml',\r\n    # 日志输出位置，可以是文件路径也可为STDOUT、STDERR\r\n    :log_src => '/var/log/cos.log',\r\n    # 输出日志级别\r\n    :log_level => Logger::INFO,\r\n    # 默认bucket\r\n    :default_bucket => 'bucket_name',\r\n    # 多次签名过期时间(单位秒)\r\n    :multiple_sign_expire => 300\r\n  }\r\n  ```\r\n\r\n\r\n- 4.1.2 标准方式初始化配置\r\n  \r\n  ``` ruby\r\n  require 'cos'\r\n  \r\n  @client = COS::Client.new(configs)\r\n  ```\r\n  \r\n- 4.1.3 实例方式初始化配置\r\n  \r\n  ``` ruby\r\n  require 'cos'\r\n  \r\n  # 程序启动时加载配置\r\n  COS.client(configs)\r\n  # 使用client\r\n  COS.client.bucket\r\n  ```\r\n  \r\n- 4.1.4 从配置文件加载配置\r\n  \r\n  ``` ruby\r\n  require 'cos'\r\n  \r\n  @client = COS::Client.new(config: './cos.yml')\r\n  # 或\r\n  COS.client(config: './cos.yml')\r\n  ```\r\n  \r\n  Rails中会自动加载项目目录下的配置文件`log/cos.yml`\r\n  \r\n  🎉【Tip】可以使用CLI指令`cos init`创建默认的yml配置文件，`cos init [配置文件路径]`自定义配置文件的路径。\r\n\r\n### 4.2 指定Bucket\r\n\r\n所有的资源基本操作是基于一个bucket的，所有我们需要先指定一个bucket：\r\n\r\n``` ruby\r\n@bucket = @client.bucket('bucket_name')\r\n# 或使用配置的默认bucket\r\n@bucket = @client.bucket\r\n```\r\n\r\n注：指定bucket时，SDK会获取一次bucket信息，获取权限类型等信息，如bucket不存在将会抛出异常。\r\n\r\n### 4.3 Bucket操作（COS::Bucket）\r\n\r\n#### 4.3.1 获取Bucket属性\r\n\r\n``` ruby\r\n# bucket名称\r\nputs @bucket.bucket_name\r\n# bucket权限\r\nputs @bucket.authority\r\n```\r\n\r\n| 属性                    | 类型            | 描述                                     |\r\n| --------------------- | ------------- | -------------------------------------- |\r\n| bucket_name           | String        | bucket名称                               |\r\n| authority             | String        | eWPrivateRPublic私有写公共读，eWPrivate私有写私有读 |\r\n| bucket_type           | Integer       | bucket_type                            |\r\n| migrate_source_domain | String        | 回源地址                                   |\r\n| need_preview          | String        | need_preview                           |\r\n| refers                | Array<String> | refers                                 |\r\n| blackrefers           | Array<String> | blackrefers                            |\r\n| cnames                | Array<String> | cnames                                 |\r\n| nugc_flag             | String        | nugc_flag                              |\r\n\r\n#### 4.3.2 创建目录（create_folder，mkdir）\r\n\r\n``` ruby\r\n@bucket.create_folder(path, options = {}) # 方法别名mkdir\r\n```\r\n\r\n参数：\r\n\r\n| 参数名                |   类型   |  必须  | 默认值  | 参数描述                                     |\r\n| :----------------- | :----: | :--: | :--: | ---------------------------------------- |\r\n| path               | String |  是   |  无   | 需要创建的目录路径, 如: 'path1', 'path1/path2', sdk会补齐末尾的 '/'。 |\r\n| options            |  Hash  |      |      |                                          |\r\n| options[:biz_attr] | String |  否   |  无   | 目录属性, 业务端维护                              |\r\n\r\n返回：\r\n\r\n``` ruby\r\nCOS::COSDir # 详见目录操作（COS::COSDir）\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\n@bucket.create_folder(\"test_dir1\", biz_attr: '测试目录1')\r\n```\r\n\r\n更多示例详见：example/create_folder.rb\r\n\r\n#### 4.3.3 列举目录（list，ls）\r\n\r\n``` ruby\r\n@bucket.list(path = '', options = {}) # 方法别名ls\r\n```\r\n\r\n参数：\r\n\r\n| 参数名               |   类型    |  必须  |  默认值  | 参数描述                                     |\r\n| :---------------- | :-----: | :--: | :---: | ---------------------------------------- |\r\n| path              | String  |  否   |   空   | 需要列举的目录路径, 如: 'path1', 'path1/path2', sdk会补齐末尾的 '/'。 |\r\n| options           |  Hash   |      |       |                                          |\r\n| options[:prefix]  | String  |  否   |   无   | 搜索前缀，如果填写prefix, 则列出含此前缀的所有文件及目录         |\r\n| options[:num]     | Integer |  否   |  20   |                                          |\r\n| options[:pattern] | Symbol  |  否   | :both | 获取模式，:dir_only 只获取目录, :file_only 只获取文件, 默认为 :both 全部获取 |\r\n| options[:order]   | Symbol  |  否   | :asc  | 排序方式 :asc 正序, :desc 倒序 默认为 :asc          |\r\n\r\n返回：\r\n\r\n``` ruby\r\n[Enumerator<Object>] 迭代器, 其中Object可能是COS::COSFile或COS::COSDir\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\n@bucket.list('test') do |res|\r\n  if res.is_a?(COS::COSDir)\r\n    puts \"Dir: #{res.name} #{res.path}\"\r\n  else\r\n    puts \"File: #{res.name} #{res.format_size}\"\r\n  end\r\nend\r\n```\r\n\r\n更多示例详见：example/list.rb\r\n\r\n#### 4.3.4 上传文件（upload）\r\n\r\n``` ruby\r\n@bucket.upload(path_or_dir, file_name, file_src, options = {}, &block)\r\n```\r\n\r\n参数：\r\n\r\n| 参数名                          |         类型         |  必须  |       默认值        | 参数描述                                     |\r\n| :--------------------------- | :----------------: | :--: | :--------------: | ---------------------------------------- |\r\n| path_or_dir                  | String/COS::COSDir |  否   |        空         | 目录路径或目录对象COSDir目录路径如: '/', 'path1', 'path1/path2', sdk会补齐末尾的 '/' |\r\n| file_name                    |       String       |  是   |        无         | 存储文件名                                    |\r\n| file_src                     |       String       |  是   |        无         | 本地文件路径                                   |\r\n| options                      |        Hash        |  否   |        无         |                                          |\r\n| options[:auto_create_folder] |      Boolean       |  否   |      false       | 自动创建远端目录                                 |\r\n| options[:min_slice_size]     |      Integer       |  否   | 10 * 1024 * 1024 | 完整上传最小文件大小,超过此大小将会使用分片多线程断点续传            |\r\n| options[:upload_retry]       |      Integer       |  否   |        10        | 上传重试次数                                   |\r\n| options[:biz_attr]           |       String       |  否   |        无         | 业务属性                                     |\r\n| options[:disable_cpt]        |      Boolean       |  否   |      false       | 是否禁用checkpoint，如禁用仍可通过服务端进行断点续传          |\r\n| options[:threads]            |      Integer       |  否   |        10        | 多线程上传线程数                                 |\r\n| options[:slice_size]         |      Integer       |  否   | 3 * 1024 * 1024  | 设置分片上传时每个分片的大小。默认为3 MB, 目前服务端最大限制也为3MB。  |\r\n| options[:cpt_file]           |       String       |  否   |        无         | 断点续传的checkpoint文件                        |\r\n| yield                        |       Float        |  否   |        无         | 上传进度百分比回调, 进度值是一个0-1之间的小数                |\r\n\r\n注：SDK会自动使用分片断点续传上传大文件。\r\n\r\n返回：\r\n\r\n``` ruby\r\nCOS::COSFile # 详见目录操作（COS::COSFile）\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\nfile = @bucket.upload('/test', 'file1.txt', '~/test.txt') do |pr|\r\n  puts \"上传进度 #{(pr*100).round(2)}%\"\r\nend\r\nputs file.name\r\nputs file.format_size\r\nputs file.url\r\n```\r\n\r\n更多示例详见： example/upload.rb\r\n\r\n#### 4.3.4 资源属性（stat）\r\n\r\n``` ruby\r\n@bucket.stat(path)\r\n```\r\n\r\n参数：\r\n\r\n| 参数名  |   类型   |  必须  | 默认值  | 参数描述                                 |\r\n| :--- | :----: | :--: | :--: | ------------------------------------ |\r\n| path | String |  是   |  无   | 资源路径, 如: 目录'path1/', 文件'path1/file'。 |\r\n\r\n返回：\r\n\r\n``` ruby\r\n可能是COS::COSFile(文件)或COS::COSDir(目录)\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\nputs @bucket.stat('/test').name\r\n```\r\n\r\n更多示例详见： example/stat.rb\r\n\r\n#### 4.3.5 更新资源属性（upadte）\r\n\r\n``` ruby\r\n@bucket.update(path, biz_attr)\r\n```\r\n\r\n参数：\r\n\r\n| 参数名      |   类型   |  必须  | 默认值  | 参数描述                                 |\r\n| :------- | :----: | :--: | :--: | ------------------------------------ |\r\n| path     | String |  是   |  无   | 资源路径, 如: 目录'path1/', 文件'path1/file'。 |\r\n| biz_attr | String |  是   |  无   | 业务属性                                 |\r\n\r\n示例：\r\n\r\n``` ruby\r\n@bucket.update('test/file1', 'new biz attr')\r\n```\r\n\r\n更多示例详见： example/update.rb\r\n\r\n#### 4.3.6 删除资源（delete）\r\n\r\n``` ruby\r\n@bucket.delete(path)\r\n```\r\n\r\n参数：\r\n\r\n| 参数名  |   类型   |  必须  | 默认值  | 参数描述                                 |\r\n| :--- | :----: | :--: | :--: | ------------------------------------ |\r\n| path | String |  是   |  无   | 资源路径, 如: 目录'path1/', 文件'path1/file'。 |\r\n\r\n注意：非空目录或根目录无法删除，会抛出异常\r\n\r\n示例：\r\n\r\n``` ruby\r\n@bucket.delete('test/')\r\n```\r\n\r\n更多示例详见：example/delete.rb\r\n\r\n#### 4.3.7 删除资源（无异常）（delete!）\r\n\r\n``` ruby\r\n@bucket.delete!(path)\r\n```\r\n\r\n参数：\r\n\r\n| 参数名  |   类型   |  必须  | 默认值  | 参数描述                                 |\r\n| :--- | :----: | :--: | :--: | ------------------------------------ |\r\n| path | String |  是   |  无   | 资源路径, 如: 目录'path1/', 文件'path1/file'。 |\r\n\r\n注意：非空目录或根目录无法删除，返回是否成功的bool值。\r\n\r\n返回：\r\n\r\n``` ruby\r\nBoolean\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\nputs @bucket.delete!('test/')\r\n```\r\n\r\n更多示例详见：example/delete.rb\r\n\r\n#### 4.3.8 判断目录是否为空（empty?）\r\n\r\n``` ruby\r\n@bucket.empty?(path)\r\n```\r\n\r\n参数：\r\n\r\n| 参数名  |   类型   |  必须  | 默认值  | 参数描述                                   |\r\n| :--- | :----: | :--: | :--: | -------------------------------------- |\r\n| path | String |  否   |  空   | 目录路径, 如: 目录'path1/'。如为空则会判断bucket是否为空。 |\r\n\r\n返回：\r\n\r\n``` ruby\r\nBoolean\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\n# 目录是否为空\r\nputs @bucket.empty?('test/')\r\n# bucket是否为空\r\nputs @bucket.empty?\r\n```\r\n\r\n#### 4.3.9 判断资源是否存在（exist?，exists?）\r\n\r\n``` ruby\r\n@bucket.exist?(path) # 别名 exists?\r\n```\r\n\r\n参数：\r\n\r\n| 参数名  |   类型   |  必须  | 默认值  | 参数描述                                |\r\n| :--- | :----: | :--: | :--: | ----------------------------------- |\r\n| path | String |  是   |  无   | 资源路径, 如: 目录'path1/', 文件'path1/file' |\r\n\r\n返回：\r\n\r\n``` ruby\r\nBoolean\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\nputs @bucket.exist?('test/')\r\nputs @bucket.exist?('test/file1')\r\n```\r\n\r\n#### 4.3.9 判断文件是否上传完成（complete?）\r\n\r\n``` ruby\r\n@bucket.complete?(path)\r\n```\r\n\r\n参数：\r\n\r\n| 参数名  |   类型   |  必须  | 默认值  | 参数描述                    |\r\n| :--- | :----: | :--: | :--: | ----------------------- |\r\n| path | String |  是   |  无   | 文件资源路径, 如: 'path1/file' |\r\n\r\n返回：\r\n\r\n``` ruby\r\nBoolean\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\nputs @bucket.complete?('path/file1')\r\n```\r\n\r\n#### 4.3.10 获取文件的访问URL（url）\r\n\r\n``` ruby\r\n@bucket.url(path_or_file, options = {})\r\n```\r\n\r\n参数：\r\n\r\n| 参数名                      |         类型          |  必须  |  默认值  | 参数描述                            |\r\n| :----------------------- | :-----------------: | :--: | :---: | ------------------------------- |\r\n| path_or_file             | String/COS::COSFile |  否   |   空   | 文件资源COSFile或路径, 如: 'path1/file' |\r\n| options                  |        Hash         |      |       |                                 |\r\n| options[:cname]          |       String        |  否   |   无   | 获取使用cname的url。在cos控制台设置的cname域名 |\r\n| options[:https]          |       Boolean       |  否   | false | 是否获取https的url                   |\r\n| options[:expire_seconds] |       Integer       |  否   |  600  | 签名有效时间(秒,私有读取bucket时需要)         |\r\n\r\n返回：\r\n\r\n``` ruby\r\nString\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\nputs bucket.url('path1/file1', https: true, cname: 'static.domain.com')\r\n```\r\n\r\n#### 4.3.11 下载文件（download）\r\n\r\n``` ruby\r\n@bucket.download(path_or_file, file_store, options = {}, &block)\r\n```\r\n\r\n参数：\r\n\r\n| 参数名                      |         类型          |  必须  |      默认值      | 参数描述                            |\r\n| :----------------------- | :-----------------: | :--: | :-----------: | ------------------------------- |\r\n| path_or_file             | String/COS::COSFile |  是   |       无       | 文件资源COSFile或路径, 如: 'path1/file' |\r\n| file_store               |       String        |  是   |       无       | 本地文件存储路径                        |\r\n| options                  |        Hash         |  否   |       无       |                                 |\r\n| options[:disable_mkdir]  |       Boolean       |  否   |     true      | 禁止自动创建本地文件夹, 默认会创建              |\r\n| options[:min_slice_size] |       Integer       |  否   | 5 * 10 * 1024 | 完整下载最小文件大小,超过此大小将会使用分片多线程断点续传   |\r\n| options[:download_retry] |       Integer       |  否   |      10       | 下载重试次数                          |\r\n| options[:disable_cpt]    |       Boolean       |  否   |     false     | 是否禁用checkpoint，如果禁用则不使用断点续传     |\r\n| yield                    |        Float        |  否   |       无       | 下载进度百分比回调, 进度值是一个0-1之间的小数       |\r\n\r\n注：支持私有访问资源下载，SDK会自动携带鉴权签名。SDK会自动使用分片断点续传下载大文件。\r\n\r\n返回：\r\n\r\n``` ruby\r\nString # 本地文件存储路径\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\nfile = bucket.download('path/file1', '~/test/file1') do |p|\r\n  puts \"下载进度: #{(p*100).round(2)}%\")\r\nend\r\nputs file\r\n```\r\n\r\n更多示例详见：example/download.rb\r\n\r\n#### 4.3.12 获取Object树形结构（tree）\r\n\r\n``` ruby\r\n@bucket.tree(path_or_dir = '', options = {})\r\n```\r\n\r\n参数：\r\n\r\n| 参数名             |         类型         |  必须  | 默认值  | 参数描述                                     |\r\n| :-------------- | :----------------: | :--: | :--: | ---------------------------------------- |\r\n| path_or_dir     | String/COS::COSDir |  否   |  空   | 目录路径或目录对象COSDir目录路径如: '/', 'path1', 'path1/path2', sdk会补齐末尾的 '/' |\r\n| options         |        Hash        |      |      |                                          |\r\n| options[:depth] |      Integer       |  否   |  5   | 子目录深度,默认为5                               |\r\n\r\n返回：\r\n\r\n``` \r\n{\r\n    :resource => Object<COS::COSDir>,\r\n    :children => [\r\n    \t{:resource => Object<COS::COSDir>, :children => [...]},\r\n    \t{:resource => Object<COS::COSFile>, :children => [...]},\r\n    \t...\r\n    ]\r\n}\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\ntree = @bucket.tree\r\nputs tree[:resource].name\r\ntree[:children].each do |r|\r\n  puts r[:resource].name\r\nend\r\n```\r\n\r\n#### 4.3.13 获取Hash树形结构（hash_tree）\r\n\r\n``` ruby\r\n@bucket.hash_tree(path_or_dir = '', options = {})\r\n```\r\n\r\n参数：\r\n\r\n| 参数名             |         类型         |  必须  | 默认值  | 参数描述                                     |\r\n| :-------------- | :----------------: | :--: | :--: | ---------------------------------------- |\r\n| path_or_dir     | String/COS::COSDir |  否   |  空   | 目录路径或目录对象COSDir目录路径如: '/', 'path1', 'path1/path2', sdk会补齐末尾的 '/' |\r\n| options         |        Hash        |      |      |                                          |\r\n| options[:depth] |      Integer       |  否   |  5   | 子目录深度,默认为5                               |\r\n\r\n返回：\r\n\r\n``` \r\n{\r\n    :resource => {:name...},\r\n    :children => [\r\n    \t{:resource => {:name...}, :children => [...]},\r\n    \t{:resource => {:name...}, :children => [...]},\r\n    \t...\r\n    ]\r\n}\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\ntree = @bucket.hash_tree\r\nputs tree[:resource][:name]\r\ntree[:children].each do |r|\r\n  puts r[:resource][:name]\r\nend\r\nputs tree.to_json # 可直接转为json\r\n```\r\n\r\n#### 4.3.14 批量下载目录下的所有文件（download_all）\r\n\r\n``` ruby\r\n@bucket.download_all(path_or_dir, file_store_path, options = {}, &block)\r\n```\r\n\r\n参数：\r\n\r\n| 参数名                      |         类型         |  必须  |      默认值      | 参数描述                                     |\r\n| :----------------------- | :----------------: | :--: | :-----------: | ---------------------------------------- |\r\n| path_or_dir              | String/COS::COSDir |  否   |       空       | 目录路径或目录对象COSDir目录路径如: '/', 'path1', 'path1/path2', sdk会补齐末尾的 '/' |\r\n| file_store_path          |       String       |  是   |       无       | 本地文件存储目录                                 |\r\n| options                  |        Hash        |  否   |       无       |                                          |\r\n| options[:disable_mkdir]  |      Boolean       |  否   |     true      | 禁止自动创建本地文件夹, 默认会创建                       |\r\n| options[:min_slice_size] |      Integer       |  否   | 5 * 10 * 1024 | 完整下载最小文件大小,超过此大小将会使用分片多线程断点续传            |\r\n| options[:download_retry] |      Integer       |  否   |      10       | 下载重试次数                                   |\r\n| options[:disable_cpt]    |      Boolean       |  否   |     false     | 是否禁用checkpoint，如果禁用则不使用断点续传              |\r\n| yield                    |       Float        |  否   |       无       | 下载进度百分比回调, 进度值是一个0-1之间的小数                |\r\n\r\n注：不包含子目录。支持私有访问资源下载，SDK会自动携带鉴权签名。SDK会自动使用分片断点续传下载大文件。\r\n\r\n返回：\r\n\r\n``` ruby\r\nArray<String> # 本地文件存储路径数组\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\nfiles = bucket.download_all('path/', '~/test/path/') do |p|\r\n  puts \"下载进度: #{(p*100).round(2)}%\")\r\nend\r\nputs files\r\n```\r\n\r\n#### 4.3.15 批量上传目录中的所有文件（upload_all）\r\n\r\n``` ruby\r\n@bucket.upload(path_or_dir, file_src_path, options = {}, &block)\r\n```\r\n\r\n参数：\r\n\r\n| 参数名                          |         类型         |  必须  |       默认值        | 参数描述                                     |\r\n| :--------------------------- | :----------------: | :--: | :--------------: | ---------------------------------------- |\r\n| path_or_dir                  | String/COS::COSDir |  否   |        空         | 目录路径或目录对象COSDir目录路径如: '/', 'path1', 'path1/path2', sdk会补齐末尾的 '/' |\r\n| file_src_path                |       String       |  是   |        无         | 本地文件夹路径                                  |\r\n| options                      |        Hash        |  否   |        无         |                                          |\r\n| options[:skip_error]         |      Boolean       |  否   |      false       | 是否跳过错误仍继续上传下一个文件                         |\r\n| options[:auto_create_folder] |      Boolean       |  否   |      false       | 自动创建远端目录                                 |\r\n| options[:min_slice_size]     |      Integer       |  否   | 10 * 1024 * 1024 | 完整上传最小文件大小,超过此大小将会使用分片多线程断点续传            |\r\n| options[:upload_retry]       |      Integer       |  否   |        10        | 上传重试次数                                   |\r\n| options[:biz_attr]           |       String       |  否   |        无         | 业务属性                                     |\r\n| options[:disable_cpt]        |      Boolean       |  否   |      false       | 是否禁用checkpoint，如禁用仍可通过服务端进行断点续传          |\r\n| options[:threads]            |      Integer       |  否   |        10        | 多线程上传线程数                                 |\r\n| options[:slice_size]         |      Integer       |  否   | 3 * 1024 * 1024  | 设置分片上传时每个分片的大小。默认为3 MB, 目前服务端最大限制也为3MB。  |\r\n| options[:cpt_file]           |       String       |  否   |        无         | 断点续传的checkpoint文件                        |\r\n| yield                        |       Float        |  否   |        无         | 上传进度百分比回调, 进度值是一个0-1之间的小数                |\r\n\r\n注：不包含子目录。SDK会自动使用分片断点续传上传大文件。\r\n\r\n返回：\r\n\r\n``` ruby\r\nArray<COS::COSFile> # 详见目录操作（COS::COSFile）\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\nfiles = @bucket.upload_all('/test', '~/path') do |pr|\r\n  puts \"上传进度 #{(pr*100).round(2)}%\"\r\nend\r\nputs files\r\n```\r\n\r\n#### 4.3.16 获取资源个数详情（支持前缀搜索）（list_count）\r\n\r\n``` ruby\r\n@bucket.list_count(path = '', options = {})\r\n```\r\n\r\n参数：\r\n\r\n| 参数名              |   类型   |  必须  | 默认值  | 参数描述                                     |\r\n| :--------------- | :----: | :--: | :--: | ---------------------------------------- |\r\n| path             | String |  否   |  空   | 目录路径, 如: 'path1', 'path1/path2', sdk会补齐末尾的 '/'。默认获取bucket根目录 |\r\n| options          |  Hash  |      |      |                                          |\r\n| options[:prefix] | String |  否   |  无   | 前缀搜索                                     |\r\n\r\n返回：\r\n\r\n``` ruby\r\nHash\r\n{\r\n  :total => 5, # 目录及文件总数\r\n  :files => 2, # 文件总数\r\n  :dirs => 3, # 目录总数\r\n}\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\nputs @bucket.list_count[:files]\r\n```\r\n\r\n#### 4.3.17 获取资源个数（count, size）\r\n\r\n``` ruby\r\n@bucket.count(path = '') # 别名 size\r\n```\r\n\r\n参数：\r\n\r\n| 参数名  |   类型   |  必须  | 默认值  | 参数描述                                     |\r\n| :--- | :----: | :--: | :--: | ---------------------------------------- |\r\n| path | String |  否   |  空   | 目录路径, 如: 'path1', 'path1/path2', sdk会补齐末尾的 '/'。默认获取bucket根目录 |\r\n\r\n返回：\r\n\r\n``` ruby\r\nInteger # 目录及文件总数\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\nputs @bucket.count\r\n```\r\n\r\n#### 4.3.18 获取文件个数（count_files）\r\n\r\n``` ruby\r\n@bucket.count_files(path = '')\r\n```\r\n\r\n参数：\r\n\r\n| 参数名  |   类型   |  必须  | 默认值  | 参数描述                                     |\r\n| :--- | :----: | :--: | :--: | ---------------------------------------- |\r\n| path | String |  否   |  空   | 目录路径, 如: 'path1', 'path1/path2', sdk会补齐末尾的 '/'。默认获取bucket根目录 |\r\n\r\n返回：\r\n\r\n``` ruby\r\nInteger # 文件总数\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\nputs @bucket.count_files\r\n```\r\n\r\n#### 4.3.19 获取目录个数（count_dirs）\r\n\r\n``` ruby\r\n@bucket.count_dirs(path = '')\r\n```\r\n\r\n参数：\r\n\r\n| 参数名  |   类型   |  必须  | 默认值  | 参数描述                                     |\r\n| :--- | :----: | :--: | :--: | ---------------------------------------- |\r\n| path | String |  否   |  空   | 目录路径, 如: 'path1', 'path1/path2', sdk会补齐末尾的 '/'。默认获取bucket根目录 |\r\n\r\n返回：\r\n\r\n``` ruby\r\nInteger # 目录总数\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\nputs @bucket.count_dirs\r\n```\r\n\r\n### 4.4 资源操作\r\n\r\n#### 4.4.1 文件操作（COS::COSFile）\r\n\r\n##### 4.4.1.1 获取文件属性\r\n\r\n``` ruby\r\n# 文件名称 \r\nputs file.name\r\n# 文件格式化大小 1B 1KB 1.1MB 1.12GB...\r\nputs file.format_size\r\n```\r\n\r\n| 属性                        | 类型      | 描述                          |\r\n| ------------------------- | ------- | --------------------------- |\r\n| name                      | String  | 名称                          |\r\n| path                      | String  | 存储路径                        |\r\n| ctime                     | String  | 创建时间unix时间戳                 |\r\n| mtime                     | String  | 修改时间unix时间戳                 |\r\n| created_at                | Time    | 创建时间Time                    |\r\n| updated_at                | Time    | 修改时间Time                    |\r\n| biz_attr                  | String  | 业务属性                        |\r\n| filesize（file_size, size） | Integer | 文件大小                        |\r\n| filelen                   | Integer | 已上传的文件大小                    |\r\n| sha                       | String  | 文件sha1值                     |\r\n| access_url                | String  | 文件访问url                     |\r\n| type                      | String  | 类型，固定为file                  |\r\n| format_size               | String  | 格式化文件大小 1B 1KB 1.1MB 1.12GB |\r\n\r\n##### 4.4.1.2 获取当前文件属性（刷新）（stat）\r\n\r\n``` ruby\r\nfile.stat\r\n```\r\n\r\n返回：\r\n\r\n``` ruby\r\nCOS::COSFile\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\nputs file.stat.to_hash\r\n```\r\n\r\n##### 4.4.1.3 更新当前文件属性（upadte）\r\n\r\n``` ruby\r\nfile.update(biz_attr)\r\n```\r\n\r\n参数：\r\n\r\n| 参数名      |   类型   |  必须  | 默认值  | 参数描述 |\r\n| :------- | :----: | :--: | :--: | ---- |\r\n| biz_attr | String |  是   |  无   | 业务属性 |\r\n\r\n示例：\r\n\r\n``` ruby\r\nfile.update('new biz attr')\r\n```\r\n\r\n##### 4.4.1.4 删除当前文件（delete）\r\n\r\n``` ruby\r\nfile.delete\r\n```\r\n\r\n注意：删除失败将抛出异常\r\n\r\n示例：\r\n\r\n``` ruby\r\nfile.delete\r\n```\r\n\r\n##### 4.4.1.5 删除当前文件（无异常）（delete!）\r\n\r\n``` ruby\r\nfile.delete!\r\n```\r\n\r\n注意：删除失败不会抛出异常，返回是否成功的bool值。\r\n\r\n返回：\r\n\r\n``` ruby\r\nBoolean\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\nputs file.delete!\r\n```\r\n\r\n##### 4.4.1.6 判断当前文件是否存在（exist?，exists?）\r\n\r\n``` ruby\r\nfile.exist? # 别名 exists?\r\n```\r\n\r\n返回：\r\n\r\n``` ruby\r\nBoolean\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\nputs file.exist?\r\n```\r\n\r\n##### 4.4.1.7 判断当前文件是否上传完成（complete?）\r\n\r\n``` ruby\r\nfile.complete?\r\n```\r\n\r\n返回：\r\n\r\n``` ruby\r\nBoolean\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\nputs file.complete?\r\n```\r\n\r\n##### 4.4.1.8 获取当前文件的访问URL（url）\r\n\r\n``` ruby\r\nfile.url(options = {})\r\n```\r\n\r\n参数：\r\n\r\n| 参数名                      |   类型    |  必须  |  默认值  | 参数描述                            |\r\n| :----------------------- | :-----: | :--: | :---: | ------------------------------- |\r\n| options                  |  Hash   |      |       |                                 |\r\n| options[:cname]          | String  |  否   |   无   | 获取使用cname的url。在cos控制台设置的cname域名 |\r\n| options[:https]          | Boolean |  否   | false | 是否获取https的url                   |\r\n| options[:expire_seconds] | Integer |  否   |  600  | 签名有效时间(秒,私有读取bucket时需要)         |\r\n\r\n返回：\r\n\r\n``` ruby\r\nString\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\nputs file.url(https: true, cname: 'static.domain.com')\r\n```\r\n\r\n##### 4.4.1.9 下载当前文件（download）\r\n\r\n``` ruby\r\nfile.download(file_store, options = {}, &block)\r\n```\r\n\r\n参数：\r\n\r\n| 参数名                      |   类型    |  必须  |      默认值      | 参数描述                          |\r\n| :----------------------- | :-----: | :--: | :-----------: | ----------------------------- |\r\n| file_store               | String  |  是   |       无       | 本地文件存储路径                      |\r\n| options                  |  Hash   |  否   |       无       |                               |\r\n| options[:disable_mkdir]  | Boolean |  否   |     true      | 禁止自动创建本地文件夹, 默认会创建            |\r\n| options[:min_slice_size] | Integer |  否   | 5 * 10 * 1024 | 完整下载最小文件大小,超过此大小将会使用分片多线程断点续传 |\r\n| options[:download_retry] | Integer |  否   |      10       | 下载重试次数                        |\r\n| options[:disable_cpt]    | Boolean |  否   |     false     | 是否禁用checkpoint，如果禁用则不使用断点续传   |\r\n| yield                    |  Float  |  否   |       无       | 下载进度百分比回调, 进度值是一个0-1之间的小数     |\r\n\r\n注：支持私有访问资源下载，SDK会自动携带鉴权签名。SDK会自动使用分片断点续传下载大文件。\r\n\r\n返回：\r\n\r\n``` ruby\r\nString # 本地文件存储路径\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\nfile = file.download('~/test/file1') do |p|\r\n  puts \"下载进度: #{(p*100).round(2)}%\")\r\nend\r\nputs file\r\n```\r\n\r\n##### 4.4.1.10 判断当前文件与本地文件是否相同\r\n\r\n``` ruby\r\nfile.sha1_match?(file)\r\n```\r\n\r\n参数：\r\n\r\n| 参数名  |   类型   |  必须  | 默认值  | 参数描述   |\r\n| :--- | :----: | :--: | :--: | ------ |\r\n| file | String |  是   |  无   | 本地文件路径 |\r\n\r\n返回：\r\n\r\n``` ruby\r\nBoolean\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\nputs file.sha1_match?('~/file1')\r\n```\r\n\r\n\r\n\r\n#### 4.4.2 目录操作（COS::COSDir）\r\n\r\n##### 4.4.2.1 获取目录属性\r\n\r\n``` ruby\r\n# 目录名称 \r\nputs dir.name\r\n# 目录存储路径\r\nputs dir.path\r\n```\r\n\r\n| 属性         | 类型     | 描述          |\r\n| ---------- | ------ | ----------- |\r\n| name       | String | 名称          |\r\n| path       | String | 存储路径        |\r\n| ctime      | String | 创建时间unix时间戳 |\r\n| mtime      | String | 修改时间unix时间戳 |\r\n| created_at | Time   | 创建时间Time    |\r\n| updated_at | Time   | 修改时间Time    |\r\n| biz_attr   | String | 业务属性        |\r\n| type       | String | 类型，固定为dir   |\r\n\r\n##### 4.4.2.2 列举当前目录（前缀搜索）（list，ls）\r\n\r\n``` ruby\r\ndir.list(options = {}) # 方法别名ls\r\n```\r\n\r\n参数：\r\n\r\n| 参数名               |   类型    |  必须  |  默认值  | 参数描述                                     |\r\n| :---------------- | :-----: | :--: | :---: | ---------------------------------------- |\r\n| options           |  Hash   |      |       |                                          |\r\n| options[:prefix]  | String  |  否   |   无   | 搜索前缀，如果填写prefix, 则列出含此前缀的所有文件及目录         |\r\n| options[:num]     | Integer |  否   |  20   |                                          |\r\n| options[:pattern] | Symbol  |  否   | :both | 获取模式，:dir_only 只获取目录, :file_only 只获取文件, 默认为 :both 全部获取 |\r\n| options[:order]   | Symbol  |  否   | :asc  | 排序方式 :asc 正序, :desc 倒序 默认为 :asc          |\r\n\r\n返回：\r\n\r\n``` ruby\r\n[Enumerator<Object>] 迭代器, 其中Object可能是COS::COSFile或COS::COSDir\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\ndir.list do |res|\r\n  if res.is_a?(COS::COSDir)\r\n    puts \"Dir: #{res.name} #{res.path}\"\r\n  else\r\n    puts \"File: #{res.name} #{res.format_size}\"\r\n  end\r\nend\r\n```\r\n\r\n##### 4.4.2.3 创建子目录（create_folder，mkdir）\r\n\r\n``` ruby\r\ndir.create_folder(dir_name, options = {}) # 方法别名mkdir\r\n```\r\n\r\n参数：\r\n\r\n| 参数名                |   类型   |  必须  | 默认值  | 参数描述                  |\r\n| :----------------- | :----: | :--: | :--: | --------------------- |\r\n| dir_name           | String |  是   |  无   | 需要创建的子目录名称，不包含父系目录路径。 |\r\n| options            |  Hash  |      |      |                       |\r\n| options[:biz_attr] | String |  否   |  无   | 目录属性, 业务端维护           |\r\n\r\n返回：\r\n\r\n``` ruby\r\nCOS::COSDir\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\ndir.create_folder(\"test_dir2\", biz_attr: '测试目录1-2')\r\n```\r\n\r\n##### 4.4.2.4 上传文件至当前目录（upload）\r\n\r\n``` ruby\r\ndir.upload(file_name, file_src, options = {}, &block)\r\n```\r\n\r\n参数：\r\n\r\n| 参数名                          |   类型    |  必须  |       默认值        | 参数描述                                    |\r\n| :--------------------------- | :-----: | :--: | :--------------: | --------------------------------------- |\r\n| file_name                    | String  |  是   |        无         | 存储文件名                                   |\r\n| file_src                     | String  |  是   |        无         | 本地文件路径                                  |\r\n| options                      |  Hash   |  否   |        无         |                                         |\r\n| options[:auto_create_folder] | Boolean |  否   |      false       | 自动创建远端目录                                |\r\n| options[:min_slice_size]     | Integer |  否   | 10 * 1024 * 1024 | 完整上传最小文件大小,超过此大小将会使用分片多线程断点续传           |\r\n| options[:upload_retry]       | Integer |  否   |        10        | 上传重试次数                                  |\r\n| options[:biz_attr]           | String  |  否   |        无         | 业务属性                                    |\r\n| options[:disable_cpt]        | Boolean |  否   |      false       | 是否禁用checkpoint，如禁用仍可通过服务端进行断点续传         |\r\n| options[:threads]            | Integer |  否   |        10        | 多线程上传线程数                                |\r\n| options[:slice_size]         | Integer |  否   | 3 * 1024 * 1024  | 设置分片上传时每个分片的大小。默认为3 MB, 目前服务端最大限制也为3MB。 |\r\n| options[:cpt_file]           | String  |  否   |        无         | 断点续传的checkpoint文件                       |\r\n| yield                        |  Float  |  否   |        无         | 上传进度百分比回调, 进度值是一个0-1之间的小数               |\r\n\r\n注：SDK会自动使用分片断点续传上传大文件。\r\n\r\n返回：\r\n\r\n``` ruby\r\nCOS::COSFile\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\nfile = dir.upload('file1.txt', '~/test.txt') do |pr|\r\n  puts \"上传进度 #{(pr*100).round(2)}%\"\r\nend\r\nputs file.name\r\nputs file.format_size\r\nputs file.url\r\n```\r\n\r\n##### 4.4.2.5 批量上传本地目录中的所有文件至当前目录（upload_all）\r\n\r\n``` ruby\r\ndir.upload(file_src_path, options = {}, &block)\r\n```\r\n\r\n参数：\r\n\r\n| 参数名                          |   类型    |  必须  |       默认值        | 参数描述                                    |\r\n| :--------------------------- | :-----: | :--: | :--------------: | --------------------------------------- |\r\n| file_src_path                | String  |  是   |        无         | 本地文件夹路径                                 |\r\n| options                      |  Hash   |  否   |        无         |                                         |\r\n| options[:skip_error]         | Boolean |  否   |      false       | 是否跳过错误仍继续上传下一个文件                        |\r\n| options[:auto_create_folder] | Boolean |  否   |      false       | 自动创建远端目录                                |\r\n| options[:min_slice_size]     | Integer |  否   | 10 * 1024 * 1024 | 完整上传最小文件大小,超过此大小将会使用分片多线程断点续传           |\r\n| options[:upload_retry]       | Integer |  否   |        10        | 上传重试次数                                  |\r\n| options[:biz_attr]           | String  |  否   |        无         | 业务属性                                    |\r\n| options[:disable_cpt]        | Boolean |  否   |      false       | 是否禁用checkpoint，如禁用仍可通过服务端进行断点续传         |\r\n| options[:threads]            | Integer |  否   |        10        | 多线程上传线程数                                |\r\n| options[:slice_size]         | Integer |  否   | 3 * 1024 * 1024  | 设置分片上传时每个分片的大小。默认为3 MB, 目前服务端最大限制也为3MB。 |\r\n| options[:cpt_file]           | String  |  否   |        无         | 断点续传的checkpoint文件                       |\r\n| yield                        |  Float  |  否   |        无         | 上传进度百分比回调, 进度值是一个0-1之间的小数               |\r\n\r\n注：不包含子目录。SDK会自动使用分片断点续传上传大文件。\r\n\r\n返回：\r\n\r\n``` ruby\r\nArray<COS::COSFile>\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\nfiles = dir.upload_all('~/path') do |pr|\r\n  puts \"上传进度 #{(pr*100).round(2)}%\"\r\nend\r\n```\r\n\r\n##### 4.4.2.6 批量下载当前目录下的所有文件（download_all）\r\n\r\n``` ruby\r\ndir.download_all(file_store_path, options = {}, &block)\r\n```\r\n\r\n参数：\r\n\r\n| 参数名                      |   类型    |  必须  |      默认值      | 参数描述                          |\r\n| :----------------------- | :-----: | :--: | :-----------: | ----------------------------- |\r\n| file_store_path          | String  |  是   |       无       | 本地文件存储目录                      |\r\n| options                  |  Hash   |  否   |       无       |                               |\r\n| options[:disable_mkdir]  | Boolean |  否   |     true      | 禁止自动创建本地文件夹, 默认会创建            |\r\n| options[:min_slice_size] | Integer |  否   | 5 * 10 * 1024 | 完整下载最小文件大小,超过此大小将会使用分片多线程断点续传 |\r\n| options[:download_retry] | Integer |  否   |      10       | 下载重试次数                        |\r\n| options[:disable_cpt]    | Boolean |  否   |     false     | 是否禁用checkpoint，如果禁用则不使用断点续传   |\r\n| yield                    |  Float  |  否   |       无       | 下载进度百分比回调, 进度值是一个0-1之间的小数     |\r\n\r\n注：不包含子目录。支持私有访问资源下载，SDK会自动携带鉴权签名。SDK会自动使用分片断点续传下载大文件。\r\n\r\n返回：\r\n\r\n``` ruby\r\nArray<String> # 本地文件存储路径数组\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\nfiles = dir.download_all('~/test/path/') do |p|\r\n  puts \"下载进度: #{(p*100).round(2)}%\")\r\nend\r\n```\r\n\r\n##### 4.4.2.7 当前目录属性（刷新）（stat）\r\n\r\n``` ruby\r\ndir.stat\r\n```\r\n\r\n返回：\r\n\r\n``` ruby\r\nCOS::COSDir\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\nputs dir.stat.to_hash\r\n```\r\n\r\n##### 4.4.2.8 更新当前目录属性（upadte）\r\n\r\n``` ruby\r\ndir.update(biz_attr)\r\n```\r\n\r\n参数：\r\n\r\n| 参数名      |   类型   |  必须  | 默认值  | 参数描述 |\r\n| :------- | :----: | :--: | :--: | ---- |\r\n| biz_attr | String |  是   |  无   | 业务属性 |\r\n\r\n示例：\r\n\r\n``` ruby\r\ndir.update('new biz attr')\r\n```\r\n\r\n##### 4.4.2.9 删除当前目录（delete）\r\n\r\n``` ruby\r\ndir.delete\r\n```\r\n\r\n注意：非空目录或根目录无法删除，会抛出异常\r\n\r\n示例：\r\n\r\n``` ruby\r\ndir.delete\r\n```\r\n\r\n##### 4.4.2.10 删除当前目录（无异常）（delete!）\r\n\r\n``` ruby\r\ndir.delete!\r\n```\r\n\r\n注意：非空目录或根目录无法删除，返回是否成功的bool值。\r\n\r\n返回：\r\n\r\n``` ruby\r\nBoolean\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\nputs dir.delete!\r\n```\r\n\r\n##### 4.4.2.11 判断当前目录是否为空（empty?）\r\n\r\n``` ruby\r\ndir.empty?\r\n```\r\n\r\n返回：\r\n\r\n``` ruby\r\nBoolean\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\nputs dir.empty?\r\n```\r\n\r\n##### 4.4.2.12 判断当前目录是否存在（exist?，exists?）\r\n\r\n``` ruby\r\ndir.exist? # 别名 exists?\r\n```\r\n\r\n返回：\r\n\r\n``` ruby\r\nBoolean\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\nputs dir.exist?\r\n```\r\n\r\n##### 4.4.2.13 获取当前目录下的Object树形结构（tree）\r\n\r\n``` ruby\r\ndir.tree(options = {})\r\n```\r\n\r\n参数：\r\n\r\n| 参数名             |   类型    |  必须  | 默认值  | 参数描述       |\r\n| :-------------- | :-----: | :--: | :--: | ---------- |\r\n| options         |  Hash   |      |      |            |\r\n| options[:depth] | Integer |  否   |  5   | 子目录深度,默认为5 |\r\n\r\n返回：\r\n\r\n``` \r\n{\r\n    :resource => Object<COS::COSDir>,\r\n    :children => [\r\n    \t{:resource => Object<COS::COSDir>, :children => [...]},\r\n    \t{:resource => Object<COS::COSFile>, :children => [...]},\r\n    \t...\r\n    ]\r\n}\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\ntree = dir.tree\r\nputs tree[:resource].name\r\ntree[:children].each do |r|\r\n  puts r[:resource].name\r\nend\r\n```\r\n\r\n##### 4.4.2.14 获取当前目录下的Hash树形结构（hash_tree）\r\n\r\n``` ruby\r\ndir.hash_tree(options = {})\r\n```\r\n\r\n参数：\r\n\r\n| 参数名             |   类型    |  必须  | 默认值  | 参数描述       |\r\n| :-------------- | :-----: | :--: | :--: | ---------- |\r\n| options         |  Hash   |      |      |            |\r\n| options[:depth] | Integer |  否   |  5   | 子目录深度,默认为5 |\r\n\r\n返回：\r\n\r\n``` \r\n{\r\n    :resource => {:name...},\r\n    :children => [\r\n    \t{:resource => {:name...}, :children => [...]},\r\n    \t{:resource => {:name...}, :children => [...]},\r\n    \t...\r\n    ]\r\n}\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\ntree = dir.hash_tree\r\nputs tree[:resource][:name]\r\ntree[:children].each do |r|\r\n  puts r[:resource][:name]\r\nend\r\nputs tree.to_json # 可直接转为json\r\n```\r\n\r\n##### 4.4.2.15 获取当前目录下的资源个数详情（支持前缀搜索）（list_count）\r\n\r\n``` ruby\r\ndir.list_count(options = {})\r\n```\r\n\r\n参数：\r\n\r\n| 参数名              |   类型   |  必须  | 默认值  | 参数描述 |\r\n| :--------------- | :----: | :--: | :--: | ---- |\r\n| options          |  Hash  |      |      |      |\r\n| options[:prefix] | String |  否   |  无   | 前缀搜索 |\r\n\r\n返回：\r\n\r\n``` ruby\r\nHash\r\n{\r\n  :total => 5, # 目录及文件总数\r\n  :files => 2, # 文件总数\r\n  :dirs => 3, # 目录总数\r\n}\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\nputs dir.list_count[:files]\r\n```\r\n\r\n##### 4.4.2.16 获取当前目录下的资源个数（count, size）\r\n\r\n``` ruby\r\ndir.count # 别名 size\r\n```\r\n\r\n返回：\r\n\r\n``` ruby\r\nInteger # 目录及文件总数\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\nputs dir.count\r\n```\r\n\r\n##### 4.4.2.17 获取当前目录下的文件个数（count_files）\r\n\r\n``` ruby\r\ndir.count_files\r\n```\r\n\r\n返回：\r\n\r\n``` ruby\r\nInteger # 文件总数\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\nputs dir.count_files\r\n```\r\n\r\n##### 4.4.2.18 获取当前目录下的子目录个数（count_dirs）\r\n\r\n``` ruby\r\ndir.count_dirs\r\n```\r\n\r\n返回：\r\n\r\n``` ruby\r\nInteger # 目录总数\r\n```\r\n\r\n示例：\r\n\r\n``` ruby\r\nputs dir.count_dirs\r\n```\r\n\r\n\r\n\r\n### 4.5 签名操作（COS::Signature）\r\n\r\n腾讯移动服务通过签名来验证请求的合法性。开发者通过将签名授权给客户端，使其具备上传下载及管理指定资源的能力。签名分为**多次有效签名**和**单次有效签名**\r\n\r\n🔍具体适用场景参见[签名适用场景](http://www.qcloud.com/wiki/%E9%89%B4%E6%9D%83%E6%8A%80%E6%9C%AF%E6%9C%8D%E5%8A%A1%E6%96%B9%E6%A1%88#4_.E7.AD.BE.E5.90.8D.E9.80.82.E7.94.A8.E5.9C.BA.E6.99.AF)\r\n\r\n#### 4.5.1 获取单次有效签名（once）\r\n\r\n签名中绑定文件fileid，此签名只可使用一次，且只能应用于被绑定的文件。\r\n\r\n``` ruby\r\nputs @client.signature.once(bucket_name, path)\r\n# path 为操作资源的路径\r\n```\r\n\r\n\r\n\r\n#### 4.5.2 获取多次有效签名（multiple）\r\n\r\n签名中不绑定文件fileid，有效期内此签名可多次使用，有效期最长可设置三个月。\r\n\r\n``` ruby\r\nputs @client.signature.multiple(bucket_name, expire_seconds)\r\n# expire_seconds 为从获取时间起得有效时间单位秒，必须大于0。\r\n```\r\n\r\n\r\n\r\n## 5 底层API（COS::API）\r\n\r\n### 5.1 创建目录(create_folder)\r\n\r\n``` ruby\r\n@client.api.create_folder(path, options = {})\r\n```\r\n\r\n参数：\r\n\r\n| 参数名                |   类型   |  必须  | 默认值  | 参数描述                                     |\r\n| :----------------- | :----: | :--: | :--: | ---------------------------------------- |\r\n| path               | String |  是   |  无   | 需要创建的目录路径, 如: 'path1', 'path1/path2', sdk会补齐末尾的 '/'。 |\r\n| options            |  Hash  |      |      |                                          |\r\n| options[:biz_attr] | String |  否   |  无   | 目录属性, 业务端维护                              |\r\n| options[:bucket]   | String |  否   |  无   | bucket名称，如未配置default_bucket则必须制定         |\r\n\r\n返回：\r\n\r\n`Hash`\r\n\r\n| 参数名           |   类型   |  必须  |    参数描述     |\r\n| :------------ | :----: | :--: | :---------: |\r\n| ctime         | String |  是   | 创建时间Unix时间戳 |\r\n| resource_path | String |  是   |   创建的资源路径   |\r\n\r\n示例：\r\n\r\n``` ruby\r\nputs @client.api.create_folder(\"test_dir5\", biz_attr: '测试目录5')\r\n```\r\n\r\n\r\n\r\n### 5.2 目录列表（前缀搜索）(list)\r\n\r\n``` ruby\r\n@client.api.list(path, options = {})\r\n```\r\n\r\n参数：\r\n\r\n| 参数名               |   类型    |  必须  |  默认值  | 参数描述                                     |\r\n| :---------------- | :-----: | :--: | :---: | ---------------------------------------- |\r\n| path              | String  |  是   |   否   | 需要列举的目录路径, 如: 'path1', 'path1/path2', sdk会补齐末尾的 '/'。 |\r\n| options           |  Hash   |      |       |                                          |\r\n| options[:prefix]  | String  |  否   |   无   | 搜索前缀，如果填写prefix, 则列出含此前缀的所有文件及目录         |\r\n| options[:num]     | Integer |  否   |  20   |                                          |\r\n| options[:pattern] | Symbol  |  否   | :both | 获取模式，:dir_only 只获取目录, :file_only 只获取文件, 默认为 :both 全部获取 |\r\n| options[:order]   | Symbol  |  否   | :asc  | 排序方式 :asc 正序, :desc 倒序 默认为 :asc          |\r\n| options[:context] | String  |  否   |   空   | 若需要翻页，需要将前一页返回值中的context透传到参数中           |\r\n| options[:bucket]  | String  |  否   |   无   | bucket名称，如未配置default_bucket则必须制定         |\r\n\r\n返回：\r\n\r\n`Hash`\r\n\r\n| 参数名             |     类型      |  必须  |                   参数描述                   |\r\n| :-------------- | :---------: | :--: | :--------------------------------------: |\r\n| context         |   String    |  是   |         透传字段,用于翻页,需要往前/往后翻页则透传回来         |\r\n| has_more        |   Boolean   |  是   |             是否有内容可以继续往前/往后翻页             |\r\n| dircount        |   Integer   |  是   |                 子目录数量(总)                 |\r\n| filecount       |   Integer   |  是   |                 子文件数量(总)                 |\r\n| infos           | Array<Hash> |  是   |                列表结果(可能为空)                |\r\n| 子属性 :name       |   String    |  是   |                 目录名/文件名                  |\r\n| 子属性 :biz_attr   |   String    |  是   |              目录/文件属性，业务端维护               |\r\n| 子属性 :filesize   |   Integer   |  否   |             文件大小(当类型为文件时返回)              |\r\n| 子属性 :filelen    |   Integer   |  否   | 文件已传输大小(通过与filesize对比可知文件传输进度,当类型为文件时返回) |\r\n| 子属性 :sha        |   String    |  否   |            文件sha1(当类型为文件时返回)             |\r\n| 子属性 :ctime      |   String    |  是   |              创建时间(Unix时间戳)               |\r\n| 子属性 :mtime      |   String    |  是   |              修改时间(Unix时间戳)               |\r\n| 子属性 :access_url |   String    |  否   |         生成的资源可访问的url(当类型为文件时返回)          |\r\n\r\n示例：\r\n\r\n``` ruby\r\nputs @client.api.list('/test', pattern: :dir_only, order: :desc, prefix: 'abc', context: '')\r\n```\r\n\r\n\r\n\r\n### 5.3 上传文件（完整上传）(upload)\r\n\r\n``` ruby\r\n@client.api.upload(path, file_name, file_src, options = {})\r\n```\r\n\r\n参数：\r\n\r\n| 参数名                |   类型   |  必须  | 默认值  | 参数描述                                     |\r\n| :----------------- | :----: | :--: | :--: | ---------------------------------------- |\r\n| path               | String |  是   |  无   | 目录路径, 如: '/', 'path1', 'path1/path2', sdk会补齐末尾的 '/' |\r\n| file_name          | String |  是   |  无   | 存储文件名                                    |\r\n| file_src           | String |  是   |  无   | 本地文件路径                                   |\r\n| options            |  Hash  |  否   |  无   |                                          |\r\n| options[:biz_attr] | String |  否   |  无   | 文件属性, 业务端维护                              |\r\n| options[:bucket]   | String |  否   |  无   | bucket名称，如未配置default_bucket则必须制定         |\r\n\r\n返回：\r\n\r\n`Hash`\r\n\r\n| 参数名           |   类型   |  必须  |    参数描述    |\r\n| :------------ | :----: | :--: | :--------: |\r\n| access_url    | String |  是   | 生成的文件下载url |\r\n| url           | String |  是   |  操作文件的url  |\r\n| resource_path | String |  是   |    资源路径    |\r\n\r\n示例：\r\n\r\n``` ruby\r\nputs @client.api.upload('/test', 'file1.txt', '~/test.txt')\r\n```\r\n\r\n\r\n\r\n### 5.4 上传文件（分片上传）(upload_slice)\r\n\r\n``` ruby\r\n@client.api.upload_slice(path, file_name, file_src, options = {})\r\n```\r\n\r\n参数：\r\n\r\n| 参数名                   |   类型    |  必须  |       默认值       | 参数描述                                     |\r\n| :-------------------- | :-----: | :--: | :-------------: | ---------------------------------------- |\r\n| path                  | String  |  是   |        无        | 目录路径, 如: '/', 'path1', 'path1/path2', sdk会补齐末尾的 '/' |\r\n| file_name             | String  |  是   |        无        | 存储文件名                                    |\r\n| file_src              | String  |  是   |        无        | 本地文件路径                                   |\r\n| options               |  Hash   |  否   |        无        |                                          |\r\n| options[:biz_attr]    | String  |  否   |        无        | 业务属性                                     |\r\n| options[:disable_cpt] | Boolean |  否   |      false      | 是否禁用checkpoint，如禁用仍可通过服务端进行断点续传          |\r\n| options[:threads]     | Integer |  否   |       10        | 多线程上传线程数                                 |\r\n| options[:slice_size]  | Integer |  否   | 3 * 1024 * 1024 | 设置分片上传时每个分片的大小。默认为3 MB, 目前服务端最大限制也为3MB。  |\r\n| options[:cpt_file]    | String  |  否   |        无        | 断点续传的checkpoint文件                        |\r\n| options[:bucket]      | String  |  否   |        无        | bucket名称，如未配置default_bucket则必须制定         |\r\n| yield                 |  Float  |  否   |        无        | 上传进度百分比回调, 进度值是一个0-1之间的小数                |\r\n\r\n返回：\r\n\r\n`Hash`\r\n\r\n| 参数名           |   类型   |  必须  |    参数描述    |\r\n| :------------ | :----: | :--: | :--------: |\r\n| access_url    | String |  是   | 生成的文件下载url |\r\n| url           | String |  是   |  操作文件的url  |\r\n| resource_path | String |  是   |    资源路径    |\r\n\r\n示例：\r\n\r\n``` ruby\r\nputs @client.api.upload_slice('/test', 'file1.txt', '~/test.txt') do |pr|\r\n  puts \"上传进度 #{(pr*100).round(2)}%\"\r\nend\r\n```\r\n\r\n\r\n\r\n### 5.5 更新文件、目录属性(update)\r\n\r\n``` ruby\r\n@client.api.update(path, biz_attr, options = {})\r\n```\r\n\r\n参数：\r\n\r\n| 参数名              |   类型   |  必须  | 默认值  | 参数描述                                     |\r\n| :--------------- | :----: | :--: | :--: | ---------------------------------------- |\r\n| path             | String |  是   |  无   | 需要创建的目录路径, 如: 'path1', 'path1/path2', sdk会补齐末尾的 '/'。 |\r\n| biz_attr         | String |  是   |  无   | 目录属性, 业务端维护                              |\r\n| options          |  Hash  |      |      |                                          |\r\n| options[:bucket] | String |  否   |  无   | bucket名称，如未配置default_bucket则必须制定         |\r\n\r\n返回：无\r\n\r\n示例：\r\n\r\n``` ruby\r\n@client.api.update('test/file1', 'new biz attr')\r\n```\r\n\r\n### 5.6 删除文件、目录(delete)\r\n\r\n``` ruby\r\n@client.api.delete(path, options = {})\r\n```\r\n\r\n参数：\r\n\r\n| 参数名              |   类型   |  必须  | 默认值  | 参数描述                                     |\r\n| :--------------- | :----: | :--: | :--: | ---------------------------------------- |\r\n| path             | String |  是   |  无   | 需要创建的目录路径, 如: 'path1', 'path1/path2', sdk会补齐末尾的 '/'。 |\r\n| options          |  Hash  |      |      |                                          |\r\n| options[:bucket] | String |  否   |  无   | bucket名称，如未配置default_bucket则必须制定         |\r\n\r\n返回：无\r\n\r\n示例：\r\n\r\n``` ruby\r\n@client.api.delete('test/file1')\r\n```\r\n\r\n### 5.7 获取文件或目录属性(stat)\r\n\r\n``` ruby\r\n@client.api.update(path, options = {})\r\n```\r\n\r\n参数：\r\n\r\n|                  |   类型   |  必须  | 默认值  | 参数描述                                     |\r\n| :--------------- | :----: | :--: | :--: | ---------------------------------------- |\r\n| path             | String |  是   |  无   | 需要创建的目录路径, 如: 'path1', 'path1/path2', sdk会补齐末尾的 '/'。 |\r\n| options          |  Hash  |      |      |                                          |\r\n| options[:bucket] | String |  否   |  无   | bucket名称，如未配置default_bucket则必须制定         |\r\n\r\n返回：\r\n\r\n`Hash`\r\n\r\n| 参数名        |   类型    |  必须  |                   参数描述                   |\r\n| :--------- | :-----: | :--: | :--------------------------------------: |\r\n| name       | String  |  是   |                 目录名/文件名                  |\r\n| biz_attr   | String  |  是   |              目录/文件属性，业务端维护               |\r\n| filesize   | Integer |  否   |             文件大小(当类型为文件时返回)              |\r\n| filelen    | Integer |  否   | 文件已传输大小(通过与filesize对比可知文件传输进度,当类型为文件时返回) |\r\n| sha        | String  |  否   |            文件sha1(当类型为文件时返回)             |\r\n| ctime      | String  |  是   |              创建时间(Unix时间戳)               |\r\n| mtime      | String  |  是   |              修改时间(Unix时间戳)               |\r\n| access_url | String  |  否   |         生成的资源可访问的url(当类型为文件时返回)          |\r\n\r\n示例：\r\n\r\n``` ruby\r\nputs @client.api.stat('/test/file')\r\n```\r\n\r\n### 5.8下载文件\r\n\r\n``` ruby\r\n@client.api.download(access_url, file_store, options = {})\r\n```\r\n\r\n参数：\r\n\r\n| 参数名               |   类型   |  必须  | 默认值  | 参数描述                             |\r\n| :---------------- | :----: | :--: | :--: | -------------------------------- |\r\n| access_url        | String |  是   |  无   | 资源的下载URL地址可以从list,stat接口中获取      |\r\n| file_store        | String |  是   |  无   | 本地文件存储路径                         |\r\n| options           |  Hash  |  否   |  无   |                                  |\r\n| options[:bucket]  | String |  否   |  无   | bucket名称，如未配置default_bucket则必须制定 |\r\n| options[:headers] |  Hash  |  否   |  无   | 设置下载请求头,如:rang                   |\r\n\r\n示例：\r\n\r\n``` ruby\r\n@client.api.download('/test/file', '~/test.txt')\r\n```\r\n\r\n\r\n\r\n## 6 CLI命令行工具\r\n\r\nSDK提供了一套包含所有API调用的CLI工具，方便开发者更好的调试与更便捷的使用COS。\r\n\r\n获取CLI指令列表：\r\n\r\n``` shell\r\n$ cos\r\n\r\nCOS Ruby SDK CLI commands:\r\n  cos count [PATH]                           # 获取文件及目录数\r\n  cos count_dirs [PATH]                      # 获取目录数\r\n  cos count_files [PATH]                     # 获取文件数\r\n  cos create_folder [PATH]                   # 创建目录\r\n  cos delete [PATH]                          # 删除目录或文件\r\n  cos download [PATH] [FILE_STORE]           # 下载文件(大文件自动分片下载,支持多线程断点续传)\r\n  cos download_all [PATH] [FILE_STORE_PATH]  # 下载目录下的所有文件(不含子目录)\r\n  cos is_exist [PATH]                        # 判断文件或目录是否存在\r\n  cos help [COMMAND]                         # 获取指令的使用帮助\r\n  cos init                                   # 创建默认配置文件\r\n  cos is_complete [PATH]                     # 判断文件是否上传完整\r\n  cos is_empty [PATH]                        # 判断目录是否为空\r\n  cos list [PATH]                            # 获取目录列表\r\n  cos sign_multi [EXPIRE]                    # 生成多次可用签名\r\n  cos sign_once [PATH]                       # 生成单次可用签名\r\n  cos stat [PATH]                            # 获取目录或文件信息\r\n  cos tree [PATH]                            # 显示树形结构\r\n  cos update [PATH] [BIZ_ATTR]               # 更新业务属性\r\n  cos upload [PATH] [FILE_NAME] [FILE_SRC]   # 上传文件(大文件自动分片上传,支持多线程断点续传)\r\n  cos upload_all [PATH] [FILE_SRC_PATH]      # 上传目录下的所有文件(不含子目录)\r\n  cos url [PATH]                             # 获取文件的访问URL\r\n\r\nOptions:\r\n  -c, [--config=CONFIG]  # 加载配置文件\r\n                         # Default: ~/.cos.yml\r\n  -b, [--bucket=BUCKET]  # 指定Bucket\r\n```\r\n\r\n获取指令的详细参数如：\r\n\r\n``` shell\r\n$ cos help upload\r\n\r\nUsage:\r\n  cos upload [PATH] [FILE_NAME] [FILE_SRC]\r\n\r\nOptions:\r\n  -r, [--biz-attr=BIZ_ATTR]                              # 业务属性\r\n  -m, [--min-slice-size=bytes]                           # 最小完整上传大小\r\n  -f, [--auto-create-folder], [--no-auto-create-folder]  # 自动创建目录\r\n  -d, [--disable-cpt], [--no-disable-cpt]                # 禁用断点续传(分片上传时有效)\r\n  -t, [--threads=N]                                      # 线程数(分片上传时有效)\r\n  -n, [--upload-retry=N]                                 # 重试次数(分片上传时有效)\r\n  -s, [--slice-size=N]                                   # 分片上传时每个分片的大小(分片上传时有效)\r\n  -e, [--cpt-file=CPT_FILE]                              # 指定断点续传记录(分片上传时有效)\r\n  -c, [--config=CONFIG]                                  # 加载配置文件\r\n                                                         # Default: ~/.cos.yml\r\n  -b, [--bucket=BUCKET]                                  # 指定Bucket\r\n\r\n上传文件(大文件自动分片上传,支持多线程上传,断点续传)\r\n```\r\n\r\n初始化创建配置文件：(默认创建于`~/.cos.yml`)\r\n\r\n``` shell\r\n$ cos init\r\n```\r\n\r\n使用CLI:\r\n\r\n``` shell\r\n$ cos upload path/path2 file1 ~/file1\r\n```\r\n\r\n## 7 运行测试\r\n\r\n``` \r\nrspec\r\n```\r\n\r\n或\r\n\r\n``` \r\nbundle exec rake spec\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}